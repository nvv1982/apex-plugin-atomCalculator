! function(t) { t.widget("ui.atomCalculator", { options: { displayMode: "extended", showIcon: !1, icon: "fa-calculator", position: "bottom left", textAlignment: "rtl", theme: "material", buttonStyle: null, showMethod: "click", showEvent: "focus", offset: 12, keyboardNav: !0, clearKey: null, plsmnsKey: null, percKey: null, readOnly: !0, classes: "", inline: !1, autoClose: !1, onInput: function() {}, onResult: function() {}, onSelect: "", onShow: "", onHide: "" }, _setWidgetVars: function() { this.apex = { item: t(this.element), $elm: t(this.element), calculatorButton: null, calculator: null }, this._scope = "ui.atomCalculator" }, _init: function() { apex.debug.log(this._scope, "_init", this) }, _create: function() { this._setWidgetVars(), this.options.showIcon && (this.apex.item.after('<button type="button" class="atomCalculatorBtn a-Button a-Button-icon t-Button t-Button--noLabel t-Button--icon" aria-label="calculator" title="Calculator" ><span class="t-Icon fa ' + this.options.icon + '" aria-hidden="true"></span></button>'), this.apex.calculatorButton = this.apex.item.next("button.atomCalculatorBtn"));
            this._scope + "_create";
            apex.debug.log("this:", this), apex.debug.log("element:", this.apex.item), this.options.onShow = function(o, i) { var e = { inst: o, animationCompleted: i },
                    a = t("#" + o.el.id);
                i && a.trigger("onshow", e) }, this.options.onHide = function(o, i) { var e = { inst: o, animationCompleted: i },
                    a = t("#" + o.el.id);
                i && a.trigger("onhide", e) }, this.options.showEvent = "", this.apex.calculator = this.apex.item.calculator(this.options, function() {}).data("calculator"), "click" == this.options.showMethod ? this.apex.item.on("click", t.proxy(this._nativeShowCalculator, this)) : "icon" == this.options.showMethod && this.options.showIcon ? this.apex.calculatorButton.on("click", t.proxy(this._nativeShowCalculator, this)) : "clickicon" == this.options.showMethod ? (this.apex.item.on("click", t.proxy(this._nativeShowCalculator, this)), this.options.showIcon && this.apex.calculatorButton.on("click", t.proxy(this._nativeShowCalculator, this))) : "focus" == this.options.showMethod && (this.apex.item.on("focus", t.proxy(this._nativeShowCalculator, this)), this.options.showIcon && this.apex.calculatorButton.on("focus", t.proxy(this._nativeShowCalculator, this))), this._apex_da(this.apex) }, _nativeShowCalculator: function() { return this.apex.item.is(".disabled") ? !1 : void this.apex.calculator.show() }, _nativeHideCalculator: function() { return this.apex.item.is(".disabled") ? !1 : void this.apex.calculator.hide() }, _apex_da: function(t) { var o = t.item.attr("id"),
                i = { enable: function() { t.item.prop("disabled", !1).atomCalculator("enable").removeClass("apex_disabled").removeClass("disabled") }, disable: function() { t.item.prop("disabled", !0).atomCalculator("disable").addClass("apex_disabled").addClass("disabled") }, afterModify: function() {}, loadingIndicator: function(t) { return t } };
            apex.widget.initPageItem(o, i) }, destroy: function() { apex.debug.log(this._scope, "destroy", this), t.Widget.prototype.destroy.apply(this, arguments), t(this.element).calculator("destroy") } }) }(apex.jQuery, apex.widget);